version: '3.8'

services:
  # Frontend - Next.js App
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8100
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      - nlp-engine
      - redis
    networks:
      - bidflow-network

  # NLP Engine Service
  nlp-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.nlp
    ports:
      - "8100:8000"
    environment:
      - PYTHON_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=bidflow2024
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./:/app
      - ./models:/app/models
    depends_on:
      - neo4j
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bidflow-network

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.14.0
    ports:
      - "7475:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/bidflow2024
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - bidflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - bidflow-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9190:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bidflow-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3101:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=bidflow2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - bidflow-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16166:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - bidflow-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.81.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    depends_on:
      - jaeger
      - prometheus
    networks:
      - bidflow-network

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bidflow-network:
    driver: bridge
